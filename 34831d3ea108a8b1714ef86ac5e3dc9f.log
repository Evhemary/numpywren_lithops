2021-10-12 11:55:29,195 - root - INFO - Logging to 34831d3ea108a8b1714ef86ac5e3dc9f.log
2021-10-12 11:57:00,224 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2021-10-12 11:57:00,225 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f55a6db8290>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f55a6db8560>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f55a6db8170>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f55a6db8290>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f55a6db8560>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f55a6db8170>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2021-10-12 11:57:00,226 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f55a6db8290>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f55a6db8560>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f55a6db8170>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f55a6db8290>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f55a6db8560>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f55a6db8170>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2021-10-12 12:00:37,403 - root - INFO - Starting with 32 cores
2021-10-12 12:03:56,884 - root - DEBUG - 7: Up Workers: 13, Busy Workers: 20
2021-10-12 14:44:54,206 - root - INFO - Logging to 34831d3ea108a8b1714ef86ac5e3dc9f.log
2021-10-12 14:54:02,269 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2021-10-12 14:54:02,270 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7fc6f48b1290>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7fc6f48b1560>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7fc6f48b1170>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7fc6f48b1290>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7fc6f48b1560>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7fc6f48b1170>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2021-10-12 14:54:02,271 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7fc6f48b1290>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7fc6f48b1560>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7fc6f48b1170>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7fc6f48b1290>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7fc6f48b1560>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7fc6f48b1170>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2021-10-12 15:00:38,453 - root - INFO - Starting with 32 cores
2021-10-12 15:15:49,957 - root - DEBUG - 7: Up Workers: 32, Busy Workers: 9
2021-10-12 15:16:07,436 - root - DEBUG - 25: Up Workers: 32, Busy Workers: 9
2021-10-12 15:16:07,437 - root - INFO - Waiting: 31, Currently Processing: 9
2021-10-12 15:16:07,437 - root - INFO - 25: Up Workers: 32, Busy Workers: 9
2021-10-12 15:21:58,967 - root - INFO - Logging to 34831d3ea108a8b1714ef86ac5e3dc9f.log
2021-10-12 15:33:10,426 - root - DEBUG - Python AST:
FunctionDef(name='CHOLESKY',
    args=arguments(
        args=[arg(arg='O', annotation=Name(id='BigMatrix')),
            arg(arg='I', annotation=Name(id='BigMatrix')),
            arg(arg='S', annotation=Name(id='BigMatrix')),
            arg(arg='N', annotation=Name(id='int')),
            arg(arg='truncate', annotation=Name(id='int'))],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
    body=[
        Assign(
            targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
            value=Call(func=Name(id='chol'),
                args=[Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)])))],
                keywords=[])),
        For(target=Name(id='j'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                    value=Call(func=Name(id='trsm'),
                        args=[
                            Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Num(n=0), Num(n=0)]))),
                            Subscript(value=Name(id='I'), slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)])))],
                        keywords=[])),
                For(target=Name(id='k'),
                    iter=Call(func=Name(id='range'),
                        args=[Num(n=1), BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='S'),
                                    slice=Index(value=Tuple(elts=[Num(n=1), Name(id='j'), Name(id='k')])))],
                            value=Call(func=Name(id='syrk'),
                                args=[
                                    Subscript(value=Name(id='I'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='k')]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='j'), Num(n=0)]))),
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='k'), Num(n=0)])))],
                                keywords=[]))],
                    orelse=[])],
            orelse=[]),
        For(target=Name(id='i'),
            iter=Call(func=Name(id='range'),
                args=[Num(n=1), BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                keywords=[]),
            body=[
                Assign(
                    targets=[
                        Subscript(value=Name(id='O'), slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')])))],
                    value=Call(func=Name(id='chol'),
                        args=[
                            Subscript(value=Name(id='S'),
                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i'), Name(id='i')])))],
                        keywords=[])),
                For(target=Name(id='j'),
                    iter=Call(func=Name(id='range'),
                        args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                            BinOp(left=Name(id='N'), op=Sub, right=Name(id='truncate'))],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Subscript(value=Name(id='O'),
                                    slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')])))],
                            value=Call(func=Name(id='trsm'),
                                args=[
                                    Subscript(value=Name(id='O'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='i')]))),
                                    Subscript(value=Name(id='S'),
                                        slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='i')])))],
                                keywords=[])),
                        For(target=Name(id='k'),
                            iter=Call(func=Name(id='range'),
                                args=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                    BinOp(left=Name(id='j'), op=Add, right=Num(n=1))],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(value=Name(id='S'),
                                            slice=Index(
                                                value=Tuple(
                                                    elts=[BinOp(left=Name(id='i'), op=Add, right=Num(n=1)),
                                                        Name(id='j'),
                                                        Name(id='k')])))],
                                    value=Call(func=Name(id='syrk'),
                                        args=[
                                            Subscript(value=Name(id='S'),
                                                slice=Index(value=Tuple(elts=[Name(id='i'), Name(id='j'), Name(id='k')]),
                                                    )),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='j'), Name(id='i')]))),
                                            Subscript(value=Name(id='O'),
                                                slice=Index(value=Tuple(elts=[Name(id='k'), Name(id='i')])))],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[])],
            orelse=[])],
    decorator_list=[],
    returns=None)

2021-10-12 15:33:10,428 - root - DEBUG - IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f5323d0f290>,
            output=IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
            args=[IndexExpr(matrix_name='I', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)])],
            kwargs=None,
            type=None),
        For(var='j',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f5323d0f560>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                    args=[
                        IndexExpr(matrix_name='O', indices=[IntConst(val=0, type=None), IntConst(val=0, type=None)]),
                        IndexExpr(matrix_name='I', indices=[Ref(name='j', type=None), IntConst(val=0, type=None)])],
                    kwargs=None,
                    type=None),
                For(var='k',
                    min=IntConst(val=1, type=None),
                    max=BinOp(op='Add', left=Ref(name='j', type=None), right=IntConst(val=1, type=None), type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f5323d0f170>,
                            output=IndexExpr(matrix_name='S',
                                indices=[IntConst(val=1, type=None),
                                    Ref(name='j', type=None),
                                    Ref(name='k', type=None)]),
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=None), Ref(name='k', type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=None), IntConst(val=0, type=None)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=None), IntConst(val=0, type=None)])],
                            kwargs=None,
                            type=None)])]),
        For(var='i',
            min=IntConst(val=1, type=None),
            max=BinOp(op='Sub', left=Ref(name='N', type=None), right=Ref(name='truncate', type=None), type=None),
            step=IntConst(val=1, type=None),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f5323d0f290>,
                    output=IndexExpr(matrix_name='O', indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=None), Ref(name='i', type=None), Ref(name='i', type=None)])],
                    kwargs=None,
                    type=None),
                For(var='j',
                    min=BinOp(op='Add', left=Ref(name='i', type=None), right=IntConst(val=1, type=None), type=None),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=None),
                        right=Ref(name='truncate', type=None),
                        type=None),
                    step=IntConst(val=1, type=None),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f5323d0f560>,
                            output=IndexExpr(matrix_name='O',
                                indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=None), Ref(name='i', type=None)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=None),
                                        Ref(name='j', type=None),
                                        Ref(name='i', type=None)])],
                            kwargs=None,
                            type=None),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=None),
                                right=IntConst(val=1, type=None),
                                type=None),
                            step=IntConst(val=1, type=None),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f5323d0f170>,
                                    output=IndexExpr(matrix_name='S',
                                        indices=[
                                            BinOp(op='Add',
                                                left=Ref(name='i', type=None),
                                                right=IntConst(val=1, type=None),
                                                type=None),
                                            Ref(name='j', type=None),
                                            Ref(name='k', type=None)]),
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=None),
                                                Ref(name='j', type=None),
                                                Ref(name='k', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=None), Ref(name='i', type=None)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=None), Ref(name='i', type=None)])],
                                    kwargs=None,
                                    type=None)])])])],
    arg_types=[<class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'numpywren.matrix.BigMatrix'>,
        <class 'int'>,
        <class 'int'>])

2021-10-12 15:33:10,429 - root - DEBUG - typed IR AST:
FuncDef(name='CHOLESKY',
    args=['O', 'I', 'S', 'N', 'truncate'],
    body=[
        RemoteCallAbstract(compute=<function chol at 0x7f5323d0f290>,
            output=[
                IndexExpr(matrix_name='O',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            args=[
                IndexExpr(matrix_name='I',
                    indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
            kwargs=None,
            type=<class 'type'>),
        For(var='j',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function trsm at 0x7f5323d0f560>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='O',
                            indices=[IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                        IndexExpr(matrix_name='I',
                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='k',
                    min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    max=BinOp(op='Add',
                        left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function syrk at 0x7f5323d0f170>,
                            output=[
                                IndexExpr(matrix_name='S',
                                    indices=[IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='I',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)]),
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                        IntConst(val=0, type=<class 'numpywren.frontend.ConstIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>)])]),
        For(var='i',
            min=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            max=BinOp(op='Sub',
                left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                type=<class 'numpywren.frontend.ConstIntType'>),
            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
            body=[
                RemoteCallAbstract(compute=<function chol at 0x7f5323d0f290>,
                    output=[
                        IndexExpr(matrix_name='O',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    args=[
                        IndexExpr(matrix_name='S',
                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                    kwargs=None,
                    type=<class 'type'>),
                For(var='j',
                    min=BinOp(op='Add',
                        left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                        right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.LinearIntType'>),
                    max=BinOp(op='Sub',
                        left=Ref(name='N', type=<class 'numpywren.frontend.ConstIntType'>),
                        right=Ref(name='truncate', type=<class 'numpywren.frontend.ConstIntType'>),
                        type=<class 'numpywren.frontend.ConstIntType'>),
                    step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                    body=[
                        RemoteCallAbstract(compute=<function trsm at 0x7f5323d0f560>,
                            output=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            args=[
                                IndexExpr(matrix_name='O',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                IndexExpr(matrix_name='S',
                                    indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                        Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                            kwargs=None,
                            type=<class 'type'>),
                        For(var='k',
                            min=BinOp(op='Add',
                                left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            max=BinOp(op='Add',
                                left=Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                right=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                                type=<class 'numpywren.frontend.LinearIntType'>),
                            step=IntConst(val=1, type=<class 'numpywren.frontend.ConstIntType'>),
                            body=[
                                RemoteCallAbstract(compute=<function syrk at 0x7f5323d0f170>,
                                    output=[
                                        IndexExpr(matrix_name='S',
                                            indices=[
                                                BinOp(op='Add',
                                                    left=Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                    right=IntConst(val=1,
                                                        type=<class 'numpywren.frontend.ConstIntType'>),
                                                    type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    args=[
                                        IndexExpr(matrix_name='S',
                                            indices=[Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='j', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)]),
                                        IndexExpr(matrix_name='O',
                                            indices=[Ref(name='k', type=<class 'numpywren.frontend.LinearIntType'>),
                                                Ref(name='i', type=<class 'numpywren.frontend.LinearIntType'>)])],
                                    kwargs=None,
                                    type=<class 'type'>)])])])],
    arg_types=[<class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.BigMatrixType'>,
        <class 'numpywren.frontend.ConstIntType'>,
        <class 'numpywren.frontend.ConstIntType'>])

2021-10-12 15:41:01,494 - root - INFO - Starting with 32 cores
2021-10-12 15:46:58,217 - root - DEBUG - 7: Up Workers: 32, Busy Workers: 32
2021-10-12 15:47:15,655 - root - DEBUG - 25: Up Workers: 31, Busy Workers: 29
2021-10-12 15:47:15,656 - root - INFO - Waiting: 456, Currently Processing: 32
2021-10-12 15:47:15,656 - root - INFO - 25: Up Workers: 31, Busy Workers: 29
2021-10-12 15:47:33,012 - root - DEBUG - 42: Up Workers: 31, Busy Workers: 27
2021-10-12 15:47:50,261 - root - DEBUG - 59: Up Workers: 31, Busy Workers: 32
2021-10-12 15:48:07,925 - root - DEBUG - 77: Up Workers: 31, Busy Workers: 32
2021-10-12 15:48:26,332 - root - DEBUG - 94: Up Workers: 31, Busy Workers: 32
2021-10-12 15:48:44,781 - root - DEBUG - 113: Up Workers: 31, Busy Workers: 32
2021-10-12 15:48:49,782 - root - INFO - launching 32 new tasks....
2021-10-12 15:55:39,913 - root - DEBUG - 528: Up Workers: -4, Busy Workers: 6
